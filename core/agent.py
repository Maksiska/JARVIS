from core.command_router import route_command
from core.semantic_cleaner import semantic_clean_via_llm
from utils.helpers import clean_text, contains_exit_command
from utils.constants import EXIT_COMMANDS
from llm.emotion_classifier import classify_emotion
from output.text_output import print_response
from output.speech_output import speak
from core.memory import add_message

def process_input(user_text: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç:
    - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
    - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏—é
    - –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç route_command
    - –æ–∑–≤—É—á–∏–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """

    cleaned = clean_text(user_text)

    if not cleaned.strip():
        print("ü§∑ –Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏.")
        return True  # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥
    if contains_exit_command(cleaned, EXIT_COMMANDS):
        speak("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
        print("üö™ –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É.")
        return False  # –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞

    # –≠–º–æ—Ü–∏–∏
    emotion = classify_emotion(cleaned)
    print(f"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ö–æ–¥
    add_message(role="user", content=cleaned)

    semantic = semantic_clean_via_llm(cleaned)
    print(f"üßπ –û—á–∏—â–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: {semantic}")

    # –ü—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    response = route_command(semantic)

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç
    add_message(role="bot", content=response)

    # –û–∑–≤—É—á–∏–≤–∞–µ–º
    speak(response)
    print_response(response)

    return True
