import os
import string
import subprocess
import ctypes

def get_all_disks():
    return [f"{d}:\\" for d in string.ascii_uppercase if os.path.exists(f"{d}:\\")]

def search_folder(target_name):
    found = []
    print(f"üîç –ü–æ–∏—Å–∫ –ø–∞–ø–æ–∫: '{target_name}'")
    for disk in get_all_disks():
        print(f"   üìÇ –î–∏—Å–∫ {disk}...")
        for root, dirs, _ in os.walk(disk):
            for name in dirs:
                if name.lower() == target_name.lower():
                    found.append(os.path.join(root, name))
    return found

def search_files(target_name):
    found = []
    print(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤: '{target_name}.*'")
    for disk in get_all_disks():
        print(f"   üìÅ –î–∏—Å–∫ {disk}...")
        for root, _, files in os.walk(disk):
            for file in files:
                name, _ = os.path.splitext(file)
                if name.lower() == target_name.lower():
                    found.append(os.path.join(root, file))
    return found

def search_applications(target_name):
    found = []
    print(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: '{target_name}.exe'")
    for disk in get_all_disks():
        print(f"   üìÅ –î–∏—Å–∫ {disk}...")
        for root, _, files in os.walk(disk):
            for file in files:
                if file.lower() == target_name.lower() + ".exe":
                    found.append(os.path.join(root, file))
    return found

def open_path(path):
    if os.path.isdir(path):
        subprocess.run(f'explorer "{path}"')
    elif os.path.isfile(path):
        subprocess.run(f'explorer /select,"{path}"')

def ask_user_choose_path(paths):
    print("\nüîé –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    for i, path in enumerate(paths, 1):
        print(f"{i}) {path}")
    while True:
        choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (–∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ")
        if choice.isdigit():
            idx = int(choice)
            if idx == 0:
                return None
            if 1 <= idx <= len(paths):
                return paths[idx - 1]
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")


def search_paths_interactive_folder(target_name: str):
    folders = search_folder(target_name)
    if not folders:
        print("\n‚ùå –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None

    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(folders)}")
    if len(folders) == 1:
        open_path(folders[0])
        return folders[0]

    chosen = ask_user_choose_path(folders)
    if chosen:
        open_path(chosen)
        return chosen
    return None

def search_paths_interactive_file(target_name: str):
    files = search_files(target_name)
    if not files:
        print("\n‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None

    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    if len(files) == 1:
        open_path(files[0])
        return files[0]

    chosen = ask_user_choose_path(files)
    if chosen:
        open_path(chosen)
        return chosen
    return None

def search_paths_interactive_app(target_name: str):
    apps = search_applications(target_name)
    if not apps:
        print("\n‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None

    def launch(path):
        try:
            print(f"[DEBUG] –ß—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º: {path}")
            import ctypes
            ctypes.windll.shell32.ShellExecuteW(
                None, "runas", path, None, None, 1
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

    launch(apps[0])

    return None




