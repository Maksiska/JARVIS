from vector_db.apps_db import search_command, add_app_command, ask_llm_action_classify
from core.actions import execute_action
from llm.ollama_client import ask_llm
from llm.action_interpreter import interpret_action
from vector_db.similarity_search import get_or_create_response
from core.path_search import search_paths_interactive, ask_user_choose_path
import os

def route_command(command_text: str) -> str:
    # === –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ ===
    if command_text.lower().startswith(("–ø–µ—Ä–µ–æ–±—É—á–∏", "–æ–±–Ω–æ–≤–∏", "–∏–∑–º–µ–Ω–∏ –ø—É—Ç—å")):
        target_name = command_text.split(maxsplit=1)[1] if len(command_text.split()) > 1 else ""
        if not target_name:
            return "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å? –ù–∞–∑–æ–≤–∏—Ç–µ –ø–∞–ø–∫—É."

        paths_found = search_paths_interactive(target_name)
        if paths_found:
            for path in paths_found:
                add_app_command(target_name, "open_path", path)

            if len(paths_found) == 1:
                return execute_action("open_path", paths_found[0])
            else:
                chosen = ask_user_choose_path(paths_found)
                if chosen:
                    return execute_action("open_path", chosen)
                else:
                    return "–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω."
        else:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

    # === –ö–æ–º–∞–Ω–¥–∞ "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É ..."
    if command_text.lower().startswith("–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É"):
        folder_name = command_text.split("–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É", 1)[1].strip()

        result = search_command(folder_name)
        if result:
            print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≤ apps_db: {result}")
            path = result["action_target"]
            if os.path.exists(path):
                return execute_action("open_path", path)
            else:
                return "‚ö†Ô∏è –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–∫–∞–∂–∏: '–ø–µ—Ä–µ–æ–±—É—á–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."

        print("–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –ø–æ –¥–∏—Å–∫–∞–º...")
        paths_found = search_paths_interactive(folder_name)
        if paths_found:
            for path in paths_found:
                add_app_command(folder_name, "open_path", path)

            if len(paths_found) == 1:
                return execute_action("open_path", paths_found[0])
            else:
                chosen = ask_user_choose_path(paths_found)
                if chosen:
                    return execute_action("open_path", chosen)
                else:
                    return "–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω."
        else:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # === –ü–æ–∏—Å–∫ –≤ apps_db (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞)
    result = search_command(command_text)
    if result:
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –≤ apps_db: {result}")

        if result["action_type"] == "open_path":
            path = result["action_target"]
            if os.path.exists(path):
                return execute_action("open_path", path)
            else:
                return "‚ö†Ô∏è –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–∫–∞–∂–∏: '–ø–µ—Ä–µ–æ–±—É—á–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å."
        else:
            return execute_action(result["action_type"], result["action_target"])

    # === –ü–æ–∏—Å–∫ –≤ ChromaDB ‚Üí LLM ‚Üí –æ–±—É—á–µ–Ω–∏–µ
    print("üîç –ü–æ–∏—Å–∫ –≤ ChromaDB...")
    action = get_or_create_response(command_text, interpret_action)

    if action["action_type"] != "unknown":
        if action["action_type"] != "search_files":
            add_app_command(command_text, action["action_type"], action["action_target"])
        return execute_action(action["action_type"], action["action_target"])

    # === –ï—Å–ª–∏ LLM –Ω–µ –ø–æ–Ω—è–ª–∞ ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    print("LLM –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É ‚Üí –æ—Ç–≤–µ—á–∞—é –∫–æ—Ä–æ—Ç–∫–æ")
    short_prompt = f"–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {command_text}"
    return ask_llm(short_prompt)
